type CONFIGURACIONDOCUMENTO @model @auth(rules: [{ allow: private }]) {
  id: ID!
  tipoDocumento: TIPODOCUMENTO
  serieActual: String
  numeroSecuencialActual: Int
  laboratorioID: ID! @index(name: "byLABORATORIO")
}

enum TIPODOCUMENTO {
  NOTADEVENTA
}

type DOCUMENTOS @model @auth(rules: [{ allow: private }]) {
  id: ID!
  tipoDocumento: TIPODOCUMENTO
  serie: String
  numeroSecuencial: Int
  laboratorioID: ID! @index(name: "byLABORATORIO")
  ordenID: ID! @index(name: "byORDEN")
}

type Caja @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombre: String
  laboratorioID: ID! @index(name: "byLABORATORIO")
  Turnos: [Turno] @hasMany(indexName: "byCaja", fields: ["id"])
}

type Turno @model @auth(rules: [{ allow: private }]) {
  id: ID!
  montoInicial: Float
  fechaApertura: String
  montoCierre: Float
  fechaCierre: String
  usuario: ID
  estado: String
  ORDENS: [ORDEN] @hasMany(indexName: "byTurno", fields: ["id"])
  GASTOS: [GASTOS] @hasMany(indexName: "byTurno", fields: ["id"])
  cajaID: ID! @index(name: "byCaja")
}

type GASTOS @model @auth(rules: [{ allow: private }]) {
  id: ID!
  montoGasto: Float
  descripcion: String
  fecha: String
  turnoID: ID! @index(name: "byTurno")
  laboratorioID: ID! @index(name: "byLABORATORIO")
}

type REFERENCE @model @auth(rules: [{ allow: private }]) {
  id: ID!
  minReferencia: String!
  maxReferencia: String
  nombre: String
  parametrostestID: ID! @index(name: "byPARAMETROSTEST")
  isValueNormal: Boolean
}

enum STATUSORDER {
  CREATED
  PUBLISHED
  VERIFIED
  SENT
}

enum TYPEORDER {
  QUOTE
  ORDER
}

type RESULTPARAMITEM @model @auth(rules: [{ allow: private }]) {
  id: ID!
  parametrostestID: ID! @index(name: "byPARAMETROSTEST")
  PARAMETROSTEST: PARAMETROSTEST @belongsTo(fields: ["parametrostestID"])
  ordenpruebaitemID: ID! @index(name: "byORDENPRUEBAITEM")
  resultParam: String
  selectedReference: ID
}

type ORDENPRUEBAITEM @model @auth(rules: [{ allow: private }]) {
  id: ID!
  pruebaID: ID! @index(name: "byPRUEBA")
  ordenID: ID! @index(name: "byORDEN")
  RESULTPARAMITEMS: [RESULTPARAMITEM]
    @hasMany(indexName: "byORDENPRUEBAITEM", fields: ["id"])
  resultInsight: String
  costo: Float!
}

type REPRESENTANTE @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombres: String!
  userName: String!
  laboratorioID: ID! @index(name: "byLABORATORIO")
  LABORATORIO: LABORATORIO @belongsTo(fields: ["laboratorioID"])
  email: String
  phoneNumber: String
  confirmed: Boolean
  blocked: Boolean
  createdBy: String!
  groups: [String]
}

type GERENTE @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombres: String!
  userName: String!
  laboratorioID: ID! @index(name: "byLABORATORIO")
  LABORATORIO: LABORATORIO @belongsTo(fields: ["laboratorioID"])
  email: String
  phoneNumber: String
  confirmed: Boolean
  blocked: Boolean
  createdBy: String!
  groups: [String]
}

type LABORATORIO @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombre: String!
  createdBy: String!
  REPRESENTANTES: [REPRESENTANTE]
    @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  GERENTES: [GERENTE] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  DOCTORS: [DOCTOR] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  PACIENTES: [PACIENTE] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  PRUEBAS: [PRUEBA] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  ORDENS: [ORDEN] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  Cajas: [Caja] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  GASTOS: [GASTOS] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  direction: String
  cp: String
  rfc: String
  contactPhone: String
  codSerial: String
  DOCUMENTOS: [DOCUMENTOS] @hasMany(indexName: "byLABORATORIO", fields: ["id"])
  CONFIGURACIONDOCUMENTOS: [CONFIGURACIONDOCUMENTO]
    @hasMany(indexName: "byLABORATORIO", fields: ["id"])
}

type PARAMETROSTEST @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombre: String!
  unidad: String
  pruebaID: ID! @index(name: "byPRUEBA")
  RESULTPARAMITEMS: [RESULTPARAMITEM]
    @hasMany(indexName: "byPARAMETROSTEST", fields: ["id"])
  category: String
  REFERENCES: [REFERENCE]
    @hasMany(indexName: "byPARAMETROSTEST", fields: ["id"])
}

enum SERVICIO {
  EXCELENTE
  REGULAR
  MALO
}

type EncuestaServicio @model @auth(rules: [{ allow: private }]) {
  id: ID!
  encuesta: SERVICIO
  usuario: String
}

type ORDEN @model @auth(rules: [{ allow: private }]) {
  id: ID!
  type: TYPEORDER!
  fechaOrden: String!
  horaOrden: String!
  formatoPago: String
  envioPaciente: String
  totalPruebas: Float!
  sucursalMuestra: String
  tratamiento: String
  capturaOrden: String
  diabetico: String
  hipertenso: String
  padecimientos: String
  medicamentos: String
  diagnostico: String
  envioDoctor: String
  altura: Float
  peso: Float
  indiceMasaCorporal: Float
  temperatura: Float
  costoTotal: Float!
  saturacion: Int
  frecuenciaCardiaca: Int
  pacienteID: ID! @index(name: "byPACIENTE")
  datePublishingResult: String
  hourPublishingResult: String
  ORDENPRUEBAITEMS: [ORDENPRUEBAITEM]
    @hasMany(indexName: "byORDEN", fields: ["id"])
  doctorID: ID! @index(name: "byDOCTOR")
  status: STATUSORDER!
  groups: [String]
  laboratorioID: ID! @index(name: "byLABORATORIO")
  LABORATORIO: LABORATORIO @belongsTo(fields: ["laboratorioID"])
  pdfReceipt: String
  urlReceipt: String
  pdfResul: String
  urlResult: String
  presion: String
  turnoID: ID! @index(name: "byTurno")
  DOCUMENTOS: [DOCUMENTOS] @hasMany(indexName: "byORDEN", fields: ["id"])
}

type PRUEBA @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombre: String!
  categoria: String!
  precio: Float!
  precioDescuento: Float
  descripcionCorta: String
  tiempoEntrega: String
  indicaciones: String
  tipoMuestra: String
  tipoContenedor: String
  PARAMETROSTESTS: [PARAMETROSTEST]
    @hasMany(indexName: "byPRUEBA", fields: ["id"])
  laboratorioID: ID! @index(name: "byLABORATORIO")
  LABORATORIO: LABORATORIO @belongsTo(fields: ["laboratorioID"])
  groups: [String]
  ORDENPRUEBAITEMS: [ORDENPRUEBAITEM]
    @hasMany(indexName: "byPRUEBA", fields: ["id"])
  grupoPersona: String
}

type DOCTOR @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombres: String!
  apellidoPaterno: String
  apellidoMaterno: String
  especialidad: String
  calle: String
  numeroExterior: String
  numeroInterior: String
  colonia: String
  cp: String
  municipio: String
  estado: String
  pais: String
  email: String
  whatsapp: String
  laboratorioID: ID! @index(name: "byLABORATORIO")
  LABORATORIO: LABORATORIO @belongsTo(fields: ["laboratorioID"])
  ORDENS: [ORDEN] @hasMany(indexName: "byDOCTOR", fields: ["id"])
  createdBy: String
  groups: [String]
  userName: String
  confirmed: Boolean
  blocked: Boolean
}

enum SEXOTIPO {
  MASCULINO
  FEMENINO
}

type PACIENTE @model @auth(rules: [{ allow: private }]) {
  id: ID!
  nombres: String!
  apellidoPaterno: String
  apellidoMaterno: String
  sexo: SEXOTIPO
  fechaNacimiento: String
  edad: Int
  direccion: String
  colonia: String
  cp: String
  municipio: String
  estado: String
  pais: String
  email: String
  whatsapp: String
  ORDENS: [ORDEN] @hasMany(indexName: "byPACIENTE", fields: ["id"])
  laboratorioID: ID! @index(name: "byLABORATORIO")
  LABORATORIO: LABORATORIO @belongsTo(fields: ["laboratorioID"])
  createdBy: String
  groups: [String]
  userName: String!
  confirmed: Boolean
  blocked: Boolean
}

type BLOG @model @auth(rules: [{ allow: public }]) {
  id: ID!
  titulo: String
  subtitulo: String
  texto1: String
  texto2: String
  texto3: String
  imagen1: String
  imagen2: String
  imagen3: String
  fecha: String
  url1: String
  url2: String
  url3: String
  autor: String
  slug: String
}
